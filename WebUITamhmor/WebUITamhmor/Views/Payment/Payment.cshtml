@model IEnumerable<WebUITamhmor.Models.DoctorModel>
@{
    ViewData["Title"] = "Payment";
}



<body>
    @foreach (var item in Model)
    {
        <div class="table-bordered " style="margin:50px; padding:20px;">
            <div style="text-align: center;">
                <h1>Payment</h1>
                <button type="button" class="btn" style="margin:20px; "> @Html.DisplayFor(modelItem => item.Dprice) Bath</button>
                <div id="container"></div>
            </div>
        </div>
    }
</body>



<script async
        src="https://pay.google.com/gp/p/js/pay.js"
        onload="onGooglePayLoaded()"></script>



<script>
        const baseRequest = {
            apiVersion: 2,
            apiVersionMinor: 0
        };
        const allowedCardNetworks = ["AMEX", "DISCOVER", "INTERAC", "JCB", "MASTERCARD", "VISA"];
        const allowedCardAuthMethods = ["PAN_ONLY", "CRYPTOGRAM_3DS"];
        const tokenizationSpecification = {
            type: 'PAYMENT_GATEWAY',
            parameters: {
                'gateway': 'example',
                'gatewayMerchantId': 'exampleGatewayMerchantId'
            }
        };
        const baseCardPaymentMethod = {
            type: 'CARD',
            parameters: {
                allowedAuthMethods: allowedCardAuthMethods,
                allowedCardNetworks: allowedCardNetworks
            }
        };
        const cardPaymentMethod = Object.assign(
            {},
            baseCardPaymentMethod,
            {
                tokenizationSpecification: tokenizationSpecification
            }
        );
        let paymentsClient = null;
        function getGoogleIsReadyToPayRequest() {
            return Object.assign(
                {},
                baseRequest,
                {
                    allowedPaymentMethods: [baseCardPaymentMethod]
                }
            );
        }
        function getGooglePaymentDataRequest() {
            const paymentDataRequest = Object.assign({}, baseRequest);
            paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod];
            paymentDataRequest.transactionInfo = getGoogleTransactionInfo();
            paymentDataRequest.merchantInfo = {

                merchantName: 'Example Merchant'
            };
            return paymentDataRequest;
        }
        function getGooglePaymentsClient() {
            if (paymentsClient == null) {
                paymentsClient = new google.payments.api.PaymentsClient({ environment: 'TEST' });
            }
            return paymentsClient;
        }
        function onGooglePayLoaded() {
            const paymentsClient = getGooglePaymentsClient();
            paymentsClient.isReadyToPay(getGoogleIsReadyToPayRequest())
                .then(function (response) {
                    if (response.result) {
                        addGooglePayButton();

                    }
                })
                .catch(function (err) {

                    console.error(err);
                });
        }
        function addGooglePayButton() {
            const paymentsClient = getGooglePaymentsClient();
            const button = paymentsClient.createButton({ onClick: onGooglePaymentButtonClicked });
            document.getElementById('container').appendChild(button);
            //window.location.href = "/Chat/Chat";
            
    }
        
        function getGoogleTransactionInfo() {
            return {

                countryCode: 'US',
                currencyCode: 'USD',
                totalPriceStatus: 'FINAL',
                // set to cart total
                totalPrice: '200'
            };
    }

    


        function prefetchGooglePaymentData() {
            const paymentDataRequest = getGooglePaymentDataRequest();
            // transactionInfo must be set but does not affect cache
            paymentDataRequest.transactionInfo = {
                totalPriceStatus: 'NOT_CURRENTLY_KNOWN',
                currencyCode: 'Bath'
            };
            const paymentsClient = getGooglePaymentsClient();
            paymentsClient.prefetchPaymentData(paymentDataRequest);
    }

        function onGooglePaymentButtonClicked() {
            const paymentDataRequest = getGooglePaymentDataRequest();
            paymentDataRequest.transactionInfo = getGoogleTransactionInfo();
            const paymentsClient = getGooglePaymentsClient();
            paymentsClient.loadPaymentData(paymentDataRequest)
                .then(function (paymentData) {
                    // handle the response
                    processPayment(paymentData);
                })
                .catch(function (err) {
                    // show error in developer console for debugging
                    console.error(err);
                });
    }

        
        function processPayment(paymentData) {
            // show returned data in developer console for debugging
            console.log(paymentData);

            paymentToken = paymentData.paymentMethodData.tokenizationData.token;
    }

</script>


